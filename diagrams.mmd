---
config:
  theme: mc
---
flowchart TB
  subgraph Internet[Internet Users]
    USERS[Web Browsers<br/>Desktop & Mobile<br/>WebRTC supported]
  end

  subgraph EdgeInfrastructure[Edge & Load Balancing Layer]
    CDN[Content Delivery Network<br/>CloudFlare / AWS CloudFront<br/>Static assets & edge caching]
    LB[Load Balancer<br/>Nginx / HAProxy<br/>SSL termination + health checks]
    SSL[TLS Certificates<br/>Let's Encrypt auto-renewal<br/>HTTP/2 & HTTP/3 support]
  end

  subgraph ApplicationTier[Application Services - Kubernetes Cluster]
    API1[API Server Pod 1<br/>Node.js + Express<br/>Horizontal Pod Autoscaler]
    API2[API Server Pod 2<br/>Node.js + Express<br/>Resource limits: 1CPU/2GB]
    API3[API Server Pod N<br/>Node.js + Express<br/>Rolling deployment strategy]
    
    WS1[WebSocket Service<br/>Socket.io cluster adapter<br/>Redis pub/sub for scaling]
    
    WORKER[Background Workers:<br/>• Health check cron jobs<br/>• Session cleanup tasks<br/>• Metrics aggregation]
    
    METRICS[Metrics Exporter<br/>Prometheus client<br/>/metrics endpoint exposed]
  end

  subgraph StreamingInfrastructure[WebRTC Streaming Cluster]
    JANUS1[Janus Gateway Instance 1<br/>SFU mode configuration<br/>VideoRoom plugin enabled<br/>4CPU/8GB RAM recommended]
    
    JANUS2[Janus Gateway Instance 2<br/>Load balanced with instance 1<br/>Shared session state in Redis<br/>Auto-scaling based on connections]
    
    MTX1[MediaMTX Instance 1<br/>RTSP ingestion server<br/>H.264 passthrough mode<br/>Connection pooling enabled]
    
    MTX2[MediaMTX Instance 2<br/>Redundant RTSP ingestion<br/>Failover configuration<br/>Health monitoring integrated]
    
    TURN1[CoTURN Server 1<br/>STUN/TURN relay service<br/>UDP/TCP/TLS support<br/>Geographic distribution]
    
    TURN2[CoTURN Server 2<br/>High availability pair<br/>Shared secret rotation<br/>Rate limiting configured]
  end

  subgraph DataPersistence[Database & Cache Layer]
    PGMASTER[(PostgreSQL Primary<br/>PostGIS extension installed<br/>Synchronous replication<br/>Automated backups)]
    
    PGREPLICA[(PostgreSQL Read Replica<br/>Read-only queries<br/>Connection pooling<br/>Failover ready)]
    
    REDIS[(Redis Cluster<br/>Session storage<br/>WebSocket scaling<br/>Cache layer<br/>3 master + 3 replica)]
  end

  subgraph ObservabilityStack[Monitoring & Observability]
    PROMETHEUS[(Prometheus Server<br/>Metrics collection<br/>Alert rule evaluation<br/>Data retention: 30 days)]
    
    GRAFANA[Grafana Instance<br/>Dashboard visualization<br/>Real-time monitoring<br/>User access control]
    
    ALERTMANAGER[AlertManager<br/>Alert routing & grouping<br/>Notification channels<br/>Silence management]
    
    LOGS[Centralized Logging<br/>ELK Stack / Grafana Loki<br/>Log aggregation<br/>Search & analysis]
  end

  subgraph CameraInfrastructure[CCTV Network Infrastructure]
    CAMERAVLAN[Private Camera VLAN<br/>Network: 192.168.100.0/24<br/>Isolated from public internet<br/>Firewall rules applied]
    
    CAMERA1[IP Camera 1<br/>RTSP: rtsp://192.168.100.101/stream<br/>Codec: H.264 Main Profile<br/>Resolution: 640x480<br/>Framerate: 15fps<br/>Audio: Disabled]
    
    CAMERA2[IP Camera 2<br/>RTSP: rtsp://192.168.100.102/stream<br/>Same specifications<br/>Power over Ethernet]
    
    CAMERAN[IP Camera N<br/>RTSP: rtsp://192.168.100.1XX/stream<br/>Scalable up to 254 cameras<br/>Network monitoring enabled]
  end

  %% External traffic flow
  USERS -->|HTTPS requests| CDN
  CDN -->|Cache miss/dynamic content| SSL
  SSL --> LB
  LB -->|Round-robin distribution| API1
  LB -->|Health check routing| API2
  LB -->|Load balancing| API3
  LB -->|WebSocket upgrade| WS1

  %% Direct WebRTC connections bypass load balancer
  USERS -.->|WebRTC signaling| JANUS1
  USERS -.->|WebRTC signaling| JANUS2
  USERS -.->|STUN/TURN requests| TURN1
  USERS -.->|STUN/TURN requests| TURN2

  %% Application to database connections
  API1 <-->|Read/Write operations| PGMASTER
  API2 <-->|Read operations| PGREPLICA
  API3 <-->|Session management| REDIS
  WS1 <-->|Pub/Sub messaging| REDIS

  %% Streaming infrastructure connections
  JANUS1 <-->|RTP/H.264 forwarding| MTX1
  JANUS2 <-->|RTP/H.264 forwarding| MTX2
  JANUS1 -.->|ICE candidate relay| TURN1
  JANUS2 -.->|ICE candidate relay| TURN2

  %% Camera network connections
  MTX1 <-->|RTSP pull ingestion| CAMERAVLAN
  MTX2 <-->|Redundant RTSP pull| CAMERAVLAN
  CAMERAVLAN --- CAMERA1
  CAMERAVLAN --- CAMERA2
  CAMERAVLAN --- CAMERAN

  %% Monitoring and observability
  METRICS -->|Metrics scraping| PROMETHEUS
  PROMETHEUS -->|Dashboard data| GRAFANA
  PROMETHEUS -->|Alert evaluation| ALERTMANAGER
  
  API1 -.->|Application logs| LOGS
  JANUS1 -.->|WebRTC logs| LOGS
  MTX1 -.->|Streaming logs| LOGS

  %% High availability and replication
  PGMASTER -.->|Streaming replication| PGREPLICA
  REDIS -.->|Cluster replication| REDIS

  %% Configuration notes
  classDef database fill:#e1f5fe
  classDef streaming fill:#f3e5f5
  classDef monitoring fill:#e8f5e8
  classDef camera fill:#fff3e0
  
  class PGMASTER,PGREPLICA,REDIS database
  class JANUS1,JANUS2,MTX1,MTX2,TURN1,TURN2 streaming
  class PROMETHEUS,GRAFANA,ALERTMANAGER,LOGS monitoring
  class CAMERAVLAN,CAMERA1,CAMERA2,CAMERAN camera
